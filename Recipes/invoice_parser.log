2024-10-29 00:29:08,996 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:29:08,996 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:30:23,495 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:30:23,495 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:30:23,512 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:30:23,544 - INFO - Processing page 1
2024-10-29 00:30:23,558 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4', 'max_tokens': 4096, 'temperature': 0.1}}
2024-10-29 00:30:23,578 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:30:23,578 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:30:23,622 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000027C2069D650>
2024-10-29 00:30:23,622 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000027C2033ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:30:23,651 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000027C2069F850>
2024-10-29 00:30:23,651 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:30:23,651 - DEBUG - send_request_headers.complete
2024-10-29 00:30:23,651 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:30:23,651 - DEBUG - send_request_body.complete
2024-10-29 00:30:23,651 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:30:25,807 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:30:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'1566'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'300000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'294045'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1.19s'), (b'x-request-id', b'req_7b0e55a2143abd7147cf328cab4551b0'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=37NwqlUffL0IohaaRhNgQFxgtQ72Wo3g_lT.nb6bbx8-1730179825-1.0.1.1-HRQXcLu1Ai_tE11LGStmLcF.c1r8LxmCjMEnElFcQEybf0IBCUqAjTkvGBEU2AwNjy5lnuZarCaKnwQPPxZ23w; path=/; expires=Tue, 29-Oct-24 06:00:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=fUgWC1Z4y_FLU9ZkUeieO5UHA8Xv798tbbwJo6Fszn4-1730179825613-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c5f8af384690-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:30:25,817 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:30:25,817 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:30:25,817 - DEBUG - receive_response_body.complete
2024-10-29 00:30:25,817 - DEBUG - response_closed.started
2024-10-29 00:30:25,817 - DEBUG - response_closed.complete
2024-10-29 00:30:25,821 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:30:25 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '1566'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '300000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '294045'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '1.19s'), ('x-request-id', 'req_7b0e55a2143abd7147cf328cab4551b0'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=37NwqlUffL0IohaaRhNgQFxgtQ72Wo3g_lT.nb6bbx8-1730179825-1.0.1.1-HRQXcLu1Ai_tE11LGStmLcF.c1r8LxmCjMEnElFcQEybf0IBCUqAjTkvGBEU2AwNjy5lnuZarCaKnwQPPxZ23w; path=/; expires=Tue, 29-Oct-24 06:00:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=fUgWC1Z4y_FLU9ZkUeieO5UHA8Xv798tbbwJo6Fszn4-1730179825613-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0c5f8af384690-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:30:25,823 - DEBUG - request_id: req_7b0e55a2143abd7147cf328cab4551b0
2024-10-29 00:30:25,841 - ERROR - Error processing with GPT-4: 'NoneType' object has no attribute 'strip'
2024-10-29 00:30:25,841 - INFO - Got result for page 1
2024-10-29 00:30:26,845 - INFO - Processing page 2
2024-10-29 00:30:26,848 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4', 'max_tokens': 4096, 'temperature': 0.1}}
2024-10-29 00:30:26,868 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:30:26,868 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:30:26,870 - DEBUG - send_request_headers.complete
2024-10-29 00:30:26,870 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:30:26,870 - DEBUG - send_request_body.complete
2024-10-29 00:30:26,870 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:30:28,581 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:30:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'1596'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'300000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'294045'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1.19s'), (b'x-request-id', b'req_ea41a6ea831babe6a8ed32b47fdbbc2d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c60cce6b4690-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:30:28,581 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:30:28,581 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:30:28,593 - DEBUG - receive_response_body.complete
2024-10-29 00:30:28,593 - DEBUG - response_closed.started
2024-10-29 00:30:28,593 - DEBUG - response_closed.complete
2024-10-29 00:30:28,593 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:30:28 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '1596', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '300000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '294045', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1.19s', 'x-request-id': 'req_ea41a6ea831babe6a8ed32b47fdbbc2d', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c60cce6b4690-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:30:28,599 - DEBUG - request_id: req_ea41a6ea831babe6a8ed32b47fdbbc2d
2024-10-29 00:30:28,601 - ERROR - Error processing with GPT-4: 'NoneType' object has no attribute 'strip'
2024-10-29 00:30:28,604 - INFO - Got result for page 2
2024-10-29 00:30:29,605 - INFO - Processing page 3
2024-10-29 00:30:29,605 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4', 'max_tokens': 4096, 'temperature': 0.1}}
2024-10-29 00:30:29,627 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:30:29,630 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:30:29,630 - DEBUG - send_request_headers.complete
2024-10-29 00:30:29,632 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:30:29,633 - DEBUG - send_request_body.complete
2024-10-29 00:30:29,633 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:30:31,474 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:30:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'1665'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'300000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'294045'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1.19s'), (b'x-request-id', b'req_1dd3b1aed666bed6c4ddb0003b8ba915'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c61e0ac24690-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:30:31,474 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:30:31,474 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:30:31,486 - DEBUG - receive_response_body.complete
2024-10-29 00:30:31,486 - DEBUG - response_closed.started
2024-10-29 00:30:31,487 - DEBUG - response_closed.complete
2024-10-29 00:30:31,487 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:30:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '1665', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '300000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '294045', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1.19s', 'x-request-id': 'req_1dd3b1aed666bed6c4ddb0003b8ba915', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c61e0ac24690-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:30:31,492 - DEBUG - request_id: req_1dd3b1aed666bed6c4ddb0003b8ba915
2024-10-29 00:30:31,495 - ERROR - Error processing with GPT-4: 'NoneType' object has no attribute 'strip'
2024-10-29 00:30:31,496 - INFO - Got result for page 3
2024-10-29 00:30:32,497 - INFO - Processing page 4
2024-10-29 00:30:32,502 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4', 'max_tokens': 4096, 'temperature': 0.1}}
2024-10-29 00:30:32,510 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:30:32,510 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:30:32,510 - DEBUG - send_request_headers.complete
2024-10-29 00:30:32,510 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:30:32,510 - DEBUG - send_request_body.complete
2024-10-29 00:30:32,516 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:30:34,592 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:30:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'1990'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'300000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'294045'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'1.19s'), (b'x-request-id', b'req_38069ead3cf0e9f8fc70c332ae5d0cb1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c630084c4690-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:30:34,592 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:30:34,592 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:30:34,592 - DEBUG - receive_response_body.complete
2024-10-29 00:30:34,608 - DEBUG - response_closed.started
2024-10-29 00:30:34,608 - DEBUG - response_closed.complete
2024-10-29 00:30:34,608 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:30:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '1990', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '300000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '294045', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '1.19s', 'x-request-id': 'req_38069ead3cf0e9f8fc70c332ae5d0cb1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c630084c4690-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:30:34,612 - DEBUG - request_id: req_38069ead3cf0e9f8fc70c332ae5d0cb1
2024-10-29 00:30:34,612 - ERROR - Error processing with GPT-4: 'NoneType' object has no attribute 'strip'
2024-10-29 00:30:34,612 - INFO - Got result for page 4
2024-10-29 00:30:35,676 - DEBUG - close.started
2024-10-29 00:30:35,676 - DEBUG - close.complete
2024-10-29 00:32:37,383 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:32:37,383 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:32:37,399 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:32:37,409 - INFO - Processing page 1
2024-10-29 00:32:37,413 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:32:37,427 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:32:37,430 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:32:37,478 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002536A98A3D0>
2024-10-29 00:32:37,478 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000002536A58ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:32:37,493 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002536A8EBE90>
2024-10-29 00:32:37,497 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:32:37,497 - DEBUG - send_request_headers.complete
2024-10-29 00:32:37,497 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:32:37,497 - DEBUG - send_request_body.complete
2024-10-29 00:32:37,497 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:32:37,927 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:32:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'352'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_c800a082349a2c9787b05285247eaea9'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=1LWwUzQ36PCcbFgaA52ovwE0_FNNwqOukVDIkzxrtqo-1730179957-1.0.1.1-yHmf_kDDl8dqEThgNqj.oOwVFOS7lK5Mi6ewXSiH.mQjAt7AJgWFjDYa4odGotjrzhmNJWNQP9QntW2MM7Eu2A; path=/; expires=Tue, 29-Oct-24 06:02:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=boTQIcRagr3wpIOkswSDlAYuoE588XaiLatNOJuG0NI-1730179957728-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c93d2a4c4762-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:32:37,932 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:32:37,932 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:32:37,937 - DEBUG - receive_response_body.complete
2024-10-29 00:32:37,937 - DEBUG - response_closed.started
2024-10-29 00:32:37,937 - DEBUG - response_closed.complete
2024-10-29 00:32:37,940 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:32:37 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '352'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_c800a082349a2c9787b05285247eaea9'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=1LWwUzQ36PCcbFgaA52ovwE0_FNNwqOukVDIkzxrtqo-1730179957-1.0.1.1-yHmf_kDDl8dqEThgNqj.oOwVFOS7lK5Mi6ewXSiH.mQjAt7AJgWFjDYa4odGotjrzhmNJWNQP9QntW2MM7Eu2A; path=/; expires=Tue, 29-Oct-24 06:02:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=boTQIcRagr3wpIOkswSDlAYuoE588XaiLatNOJuG0NI-1730179957728-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0c93d2a4c4762-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:32:37,942 - DEBUG - request_id: req_c800a082349a2c9787b05285247eaea9
2024-10-29 00:32:37,947 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:32:37,948 - INFO - Got result for page 1
2024-10-29 00:32:38,948 - INFO - Processing page 2
2024-10-29 00:32:38,954 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:32:38,970 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:32:38,970 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:32:38,970 - DEBUG - send_request_headers.complete
2024-10-29 00:32:38,970 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:32:38,973 - DEBUG - send_request_body.complete
2024-10-29 00:32:38,973 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:32:39,363 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:32:39 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'265'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_28e87a82db089e3a9fe8fab88d17d467'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c9465b6e4762-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:32:39,363 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:32:39,363 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:32:39,363 - DEBUG - receive_response_body.complete
2024-10-29 00:32:39,363 - DEBUG - response_closed.started
2024-10-29 00:32:39,363 - DEBUG - response_closed.complete
2024-10-29 00:32:39,371 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:32:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '265', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_28e87a82db089e3a9fe8fab88d17d467', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c9465b6e4762-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:32:39,373 - DEBUG - request_id: req_28e87a82db089e3a9fe8fab88d17d467
2024-10-29 00:32:39,376 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:32:39,376 - INFO - Got result for page 2
2024-10-29 00:32:40,387 - INFO - Processing page 3
2024-10-29 00:32:40,387 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:32:40,387 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:32:40,403 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:32:40,403 - DEBUG - send_request_headers.complete
2024-10-29 00:32:40,403 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:32:40,403 - DEBUG - send_request_body.complete
2024-10-29 00:32:40,403 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:32:40,819 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:32:40 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'318'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_904e1768c322ec09522e188327aa64e8'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c94f5cb74762-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:32:40,819 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:32:40,819 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:32:40,819 - DEBUG - receive_response_body.complete
2024-10-29 00:32:40,819 - DEBUG - response_closed.started
2024-10-29 00:32:40,819 - DEBUG - response_closed.complete
2024-10-29 00:32:40,819 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:32:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '318', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_904e1768c322ec09522e188327aa64e8', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c94f5cb74762-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:32:40,834 - DEBUG - request_id: req_904e1768c322ec09522e188327aa64e8
2024-10-29 00:32:40,834 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:32:40,834 - INFO - Got result for page 3
2024-10-29 00:32:41,837 - INFO - Processing page 4
2024-10-29 00:32:41,847 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:32:41,861 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:32:41,861 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:32:41,862 - DEBUG - send_request_headers.complete
2024-10-29 00:32:41,862 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:32:41,862 - DEBUG - send_request_body.complete
2024-10-29 00:32:41,862 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:32:42,228 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:32:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'244'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_d7fd1dd12cd284b749969e8055846362'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0c9587e494762-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:32:42,228 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:32:42,228 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:32:42,228 - DEBUG - receive_response_body.complete
2024-10-29 00:32:42,228 - DEBUG - response_closed.started
2024-10-29 00:32:42,228 - DEBUG - response_closed.complete
2024-10-29 00:32:42,228 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:32:41 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '244', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_d7fd1dd12cd284b749969e8055846362', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0c9587e494762-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:32:42,228 - DEBUG - request_id: req_d7fd1dd12cd284b749969e8055846362
2024-10-29 00:32:42,228 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:32:42,228 - INFO - Got result for page 4
2024-10-29 00:32:43,297 - DEBUG - close.started
2024-10-29 00:32:43,307 - DEBUG - close.complete
2024-10-29 00:33:13,802 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:33:13,802 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:33:13,818 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:33:13,829 - INFO - Processing page 1
2024-10-29 00:33:13,833 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:33:13,855 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:33:13,855 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:33:13,880 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000020E815A3DD0>
2024-10-29 00:33:13,880 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000020E8115ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:33:13,903 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000020E81649AD0>
2024-10-29 00:33:13,903 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:33:13,903 - DEBUG - send_request_headers.complete
2024-10-29 00:33:13,903 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:33:13,903 - DEBUG - send_request_body.complete
2024-10-29 00:33:13,903 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:33:14,296 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:33:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'282'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_346c9c1abf139e6391d33d128eabc47c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=Hs5mX6c3rWWSkOWt4RHf8o5hIWDufbqXvXX6vVDh.Eo-1730179994-1.0.1.1-DuSCX4yG3JEWehFbwoYjNfYAfzg7NxtHDTREGeXRX4LeHAjRUf1JCkwmulN3AKMs3TmyZy5AVFabUQD5tIKzHQ; path=/; expires=Tue, 29-Oct-24 06:03:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=xkQB4d3Zo5HSxtyoPgqCxfcx7V6oNBPfLBTVCMthRhs-1730179994099-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0ca20bc8e474b-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:33:14,296 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:33:14,296 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:33:14,296 - DEBUG - receive_response_body.complete
2024-10-29 00:33:14,296 - DEBUG - response_closed.started
2024-10-29 00:33:14,311 - DEBUG - response_closed.complete
2024-10-29 00:33:14,311 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:33:14 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '282'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_346c9c1abf139e6391d33d128eabc47c'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=Hs5mX6c3rWWSkOWt4RHf8o5hIWDufbqXvXX6vVDh.Eo-1730179994-1.0.1.1-DuSCX4yG3JEWehFbwoYjNfYAfzg7NxtHDTREGeXRX4LeHAjRUf1JCkwmulN3AKMs3TmyZy5AVFabUQD5tIKzHQ; path=/; expires=Tue, 29-Oct-24 06:03:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=xkQB4d3Zo5HSxtyoPgqCxfcx7V6oNBPfLBTVCMthRhs-1730179994099-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0ca20bc8e474b-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:33:14,311 - DEBUG - request_id: req_346c9c1abf139e6391d33d128eabc47c
2024-10-29 00:33:14,320 - INFO - Response from GPT-4: ```json
[]
```...
2024-10-29 00:33:14,320 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:33:14,320 - INFO - Got result for page 1
2024-10-29 00:33:15,324 - INFO - Processing page 2
2024-10-29 00:33:15,324 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:33:15,344 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:33:15,344 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:33:15,344 - DEBUG - send_request_headers.complete
2024-10-29 00:33:15,344 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:33:15,344 - DEBUG - send_request_body.complete
2024-10-29 00:33:15,344 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:33:15,811 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:33:15 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'305'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_50056d0e7112e31a15319b6ba349ba37'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0ca29bf22474b-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:33:15,821 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:33:15,821 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:33:15,821 - DEBUG - receive_response_body.complete
2024-10-29 00:33:15,821 - DEBUG - response_closed.started
2024-10-29 00:33:15,821 - DEBUG - response_closed.complete
2024-10-29 00:33:15,821 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:33:15 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '305', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_50056d0e7112e31a15319b6ba349ba37', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0ca29bf22474b-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:33:15,827 - DEBUG - request_id: req_50056d0e7112e31a15319b6ba349ba37
2024-10-29 00:33:15,827 - INFO - Response from GPT-4: ```json
[]
```...
2024-10-29 00:33:15,829 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:33:15,829 - INFO - Got result for page 2
2024-10-29 00:33:16,830 - INFO - Processing page 3
2024-10-29 00:33:16,838 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:33:16,849 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:33:16,849 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:33:16,851 - DEBUG - send_request_headers.complete
2024-10-29 00:33:16,851 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:33:16,851 - DEBUG - send_request_body.complete
2024-10-29 00:33:16,851 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:33:17,241 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:33:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'238'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_f5940b0c2f71f9a805e0168fae764335'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0ca3319d6474b-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:33:17,255 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:33:17,255 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:33:17,255 - DEBUG - receive_response_body.complete
2024-10-29 00:33:17,257 - DEBUG - response_closed.started
2024-10-29 00:33:17,257 - DEBUG - response_closed.complete
2024-10-29 00:33:17,257 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:33:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '238', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_f5940b0c2f71f9a805e0168fae764335', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0ca3319d6474b-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:33:17,262 - DEBUG - request_id: req_f5940b0c2f71f9a805e0168fae764335
2024-10-29 00:33:17,262 - INFO - Response from GPT-4: ```json
[]
```...
2024-10-29 00:33:17,265 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:33:17,265 - INFO - Got result for page 3
2024-10-29 00:33:18,267 - INFO - Processing page 4
2024-10-29 00:33:18,270 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:33:18,279 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:33:18,280 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:33:18,280 - DEBUG - send_request_headers.complete
2024-10-29 00:33:18,280 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:33:18,280 - DEBUG - send_request_body.complete
2024-10-29 00:33:18,280 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:33:18,779 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:33:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'329'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_68422091196f1758423fcc4e38404191'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0ca3c1beb474b-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:33:18,779 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:33:18,779 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:33:18,779 - DEBUG - receive_response_body.complete
2024-10-29 00:33:18,779 - DEBUG - response_closed.started
2024-10-29 00:33:18,779 - DEBUG - response_closed.complete
2024-10-29 00:33:18,779 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:33:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '329', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_68422091196f1758423fcc4e38404191', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0ca3c1beb474b-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:33:18,790 - DEBUG - request_id: req_68422091196f1758423fcc4e38404191
2024-10-29 00:33:18,790 - INFO - Response from GPT-4: ```json
[]
```...
2024-10-29 00:33:18,790 - ERROR - Error processing with GPT-4: 'list' object has no attribute 'strip'
2024-10-29 00:33:18,790 - INFO - Got result for page 4
2024-10-29 00:33:19,857 - DEBUG - close.started
2024-10-29 00:33:19,857 - DEBUG - close.complete
2024-10-29 00:35:40,971 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:35:40,974 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:35:40,985 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:35:40,985 - INFO - Processing page 1
2024-10-29 00:35:40,996 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:35:41,018 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:35:41,018 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:35:41,058 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002EF9FBEA150>
2024-10-29 00:35:41,058 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000002EF9F7D2C30> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:35:41,081 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002EF9FBEF8D0>
2024-10-29 00:35:41,081 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:35:41,081 - DEBUG - send_request_headers.complete
2024-10-29 00:35:41,081 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:35:41,081 - DEBUG - send_request_body.complete
2024-10-29 00:35:41,081 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:35:41,631 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:35:41 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'375'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_d227a4c94ebb7bb2ecd302c517a02b79'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=CUK5ypDjpaG0b3IFxQoTLlA3Fk3EFFmoq9HqjsDJ.ks-1730180141-1.0.1.1-xa5utXnpOKtJScXfCkvnZ4NUqbmPvtHTu2O5VF0USWOoBIXaHUusqwCFOrXhCLZkq7k8.SjCxIruXUcv.XICng; path=/; expires=Tue, 29-Oct-24 06:05:41 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=juZvZ6_xq5FyaQvLzFOh5h3ebIsAzcZbOujXWudctaU-1730180141345-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0cdb8880a2fd4-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:35:41,638 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:35:41,639 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:35:41,639 - DEBUG - receive_response_body.complete
2024-10-29 00:35:41,639 - DEBUG - response_closed.started
2024-10-29 00:35:41,641 - DEBUG - response_closed.complete
2024-10-29 00:35:41,641 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:35:41 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '375'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_d227a4c94ebb7bb2ecd302c517a02b79'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=CUK5ypDjpaG0b3IFxQoTLlA3Fk3EFFmoq9HqjsDJ.ks-1730180141-1.0.1.1-xa5utXnpOKtJScXfCkvnZ4NUqbmPvtHTu2O5VF0USWOoBIXaHUusqwCFOrXhCLZkq7k8.SjCxIruXUcv.XICng; path=/; expires=Tue, 29-Oct-24 06:05:41 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=juZvZ6_xq5FyaQvLzFOh5h3ebIsAzcZbOujXWudctaU-1730180141345-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0cdb8880a2fd4-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:35:41,643 - DEBUG - request_id: req_d227a4c94ebb7bb2ecd302c517a02b79
2024-10-29 00:35:41,643 - INFO - Got result for page 1
2024-10-29 00:35:42,649 - INFO - Processing page 2
2024-10-29 00:35:42,652 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:35:42,665 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:35:42,665 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:35:42,666 - DEBUG - send_request_headers.complete
2024-10-29 00:35:42,666 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:35:42,666 - DEBUG - send_request_body.complete
2024-10-29 00:35:42,666 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:35:43,055 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:35:42 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'260'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_793cb746907f390e4f43b9a7d9c726fc'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0cdc27d052fd4-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:35:43,055 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:35:43,055 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:35:43,055 - DEBUG - receive_response_body.complete
2024-10-29 00:35:43,055 - DEBUG - response_closed.started
2024-10-29 00:35:43,055 - DEBUG - response_closed.complete
2024-10-29 00:35:43,055 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:35:42 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '260', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_793cb746907f390e4f43b9a7d9c726fc', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0cdc27d052fd4-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:35:43,067 - DEBUG - request_id: req_793cb746907f390e4f43b9a7d9c726fc
2024-10-29 00:35:43,067 - INFO - Got result for page 2
2024-10-29 00:35:43,067 - ERROR - Error processing page 2: 'str' object has no attribute 'get'
2024-10-29 00:35:43,067 - INFO - Processing page 3
2024-10-29 00:35:43,076 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:35:43,083 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:35:43,085 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:35:43,085 - DEBUG - send_request_headers.complete
2024-10-29 00:35:43,085 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:35:43,085 - DEBUG - send_request_body.complete
2024-10-29 00:35:43,085 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:35:43,478 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:35:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'266'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_ee22ef14497fc7b3ba1f504450c3ce47'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0cdc51e522fd4-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:35:43,478 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:35:43,484 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:35:43,484 - DEBUG - receive_response_body.complete
2024-10-29 00:35:43,484 - DEBUG - response_closed.started
2024-10-29 00:35:43,484 - DEBUG - response_closed.complete
2024-10-29 00:35:43,484 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:35:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '266', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_ee22ef14497fc7b3ba1f504450c3ce47', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0cdc51e522fd4-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:35:43,489 - DEBUG - request_id: req_ee22ef14497fc7b3ba1f504450c3ce47
2024-10-29 00:35:43,489 - INFO - Got result for page 3
2024-10-29 00:35:43,491 - ERROR - Error processing page 3: 'str' object has no attribute 'get'
2024-10-29 00:35:43,491 - INFO - Processing page 4
2024-10-29 00:35:43,493 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:35:43,493 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:35:43,493 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:35:43,501 - DEBUG - send_request_headers.complete
2024-10-29 00:35:43,501 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:35:43,501 - DEBUG - send_request_body.complete
2024-10-29 00:35:43,501 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:35:43,892 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:35:43 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'302'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_e30fbff50604a00e3518ee9c89e96e5c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0cdc7af942fd4-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:35:43,899 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:35:43,900 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:35:43,900 - DEBUG - receive_response_body.complete
2024-10-29 00:35:43,900 - DEBUG - response_closed.started
2024-10-29 00:35:43,900 - DEBUG - response_closed.complete
2024-10-29 00:35:43,904 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:35:43 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '302', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_e30fbff50604a00e3518ee9c89e96e5c', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0cdc7af942fd4-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:35:43,904 - DEBUG - request_id: req_e30fbff50604a00e3518ee9c89e96e5c
2024-10-29 00:35:43,904 - INFO - Got result for page 4
2024-10-29 00:35:43,904 - ERROR - Error processing page 4: 'str' object has no attribute 'get'
2024-10-29 00:35:43,908 - ERROR - Error in main execution: 'str' object has no attribute 'get'
2024-10-29 00:35:43,963 - DEBUG - close.started
2024-10-29 00:35:43,963 - DEBUG - close.complete
2024-10-29 00:39:52,116 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:39:52,116 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:39:52,132 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:39:52,138 - INFO - Processing page 1
2024-10-29 00:39:52,142 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:39:52,158 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:39:52,164 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:39:52,201 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001B4FE259A90>
2024-10-29 00:39:52,201 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001B4FDE5ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:39:52,220 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001B4FE259B10>
2024-10-29 00:39:52,220 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:39:52,222 - DEBUG - send_request_headers.complete
2024-10-29 00:39:52,223 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:39:52,223 - DEBUG - send_request_body.complete
2024-10-29 00:39:52,223 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:39:52,661 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:39:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'335'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_abbd55eef59d179764e96f8ffcd03a5d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=JP_cbtxQdaVi0HHsmvVGRea8mVgak54YaP.ci6IW3Vw-1730180392-1.0.1.1-iF4DbjpII66b0qAfNE31XsgCxBKRYk0ZBfxNU20cEmMH18HvZH6Vwvf1gsTCWIroeRANEToqkvwVvIKLReCt4w; path=/; expires=Tue, 29-Oct-24 06:09:52 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=CfN7yPsVbzKskloszfOrGQRcptehAWLYcrGLgRpvRmU-1730180392457-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d3da29056b65-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:39:52,661 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:39:52,661 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:39:52,668 - DEBUG - receive_response_body.complete
2024-10-29 00:39:52,668 - DEBUG - response_closed.started
2024-10-29 00:39:52,669 - DEBUG - response_closed.complete
2024-10-29 00:39:52,675 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:39:52 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '335'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_abbd55eef59d179764e96f8ffcd03a5d'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=JP_cbtxQdaVi0HHsmvVGRea8mVgak54YaP.ci6IW3Vw-1730180392-1.0.1.1-iF4DbjpII66b0qAfNE31XsgCxBKRYk0ZBfxNU20cEmMH18HvZH6Vwvf1gsTCWIroeRANEToqkvwVvIKLReCt4w; path=/; expires=Tue, 29-Oct-24 06:09:52 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=CfN7yPsVbzKskloszfOrGQRcptehAWLYcrGLgRpvRmU-1730180392457-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0d3da29056b65-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:39:52,675 - DEBUG - request_id: req_abbd55eef59d179764e96f8ffcd03a5d
2024-10-29 00:39:52,680 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:39:52,680 - INFO - Got result for page 1
2024-10-29 00:39:53,683 - INFO - Processing page 2
2024-10-29 00:39:53,689 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:39:53,693 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:39:53,696 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:39:53,696 - DEBUG - send_request_headers.complete
2024-10-29 00:39:53,696 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:39:53,696 - DEBUG - send_request_body.complete
2024-10-29 00:39:53,696 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:39:54,144 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:39:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'321'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_6fbd778e5582b0d51a35ac3b324720cd'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d3e368a86b65-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:39:54,160 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:39:54,160 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:39:54,160 - DEBUG - receive_response_body.complete
2024-10-29 00:39:54,160 - DEBUG - response_closed.started
2024-10-29 00:39:54,160 - DEBUG - response_closed.complete
2024-10-29 00:39:54,160 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:39:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '321', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_6fbd778e5582b0d51a35ac3b324720cd', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d3e368a86b65-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:39:54,169 - DEBUG - request_id: req_6fbd778e5582b0d51a35ac3b324720cd
2024-10-29 00:39:54,172 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:39:54,173 - INFO - Got result for page 2
2024-10-29 00:39:55,175 - INFO - Processing page 3
2024-10-29 00:39:55,181 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:39:55,190 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:39:55,190 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:39:55,190 - DEBUG - send_request_headers.complete
2024-10-29 00:39:55,190 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:39:55,190 - DEBUG - send_request_body.complete
2024-10-29 00:39:55,196 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:39:55,581 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:39:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'230'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_8e8286531d6bb3028fb74e24eee48c97'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d3ecc8eb6b65-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:39:55,581 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:39:55,581 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:39:55,596 - DEBUG - receive_response_body.complete
2024-10-29 00:39:55,596 - DEBUG - response_closed.started
2024-10-29 00:39:55,596 - DEBUG - response_closed.complete
2024-10-29 00:39:55,596 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:39:55 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '230', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_8e8286531d6bb3028fb74e24eee48c97', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d3ecc8eb6b65-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:39:55,602 - DEBUG - request_id: req_8e8286531d6bb3028fb74e24eee48c97
2024-10-29 00:39:55,604 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:39:55,605 - INFO - Got result for page 3
2024-10-29 00:39:56,607 - INFO - Processing page 4
2024-10-29 00:39:56,614 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:39:56,631 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:39:56,632 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:39:56,632 - DEBUG - send_request_headers.complete
2024-10-29 00:39:56,632 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:39:56,632 - DEBUG - send_request_body.complete
2024-10-29 00:39:56,632 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:39:56,979 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:39:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'261'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_9b63450b538338f8072abc854ddd1857'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d3f5b9b06b65-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:39:56,979 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:39:56,987 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:39:56,987 - DEBUG - receive_response_body.complete
2024-10-29 00:39:56,989 - DEBUG - response_closed.started
2024-10-29 00:39:56,989 - DEBUG - response_closed.complete
2024-10-29 00:39:56,989 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:39:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '261', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_9b63450b538338f8072abc854ddd1857', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d3f5b9b06b65-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:39:56,993 - DEBUG - request_id: req_9b63450b538338f8072abc854ddd1857
2024-10-29 00:39:56,995 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:39:56,995 - INFO - Got result for page 4
2024-10-29 00:39:58,062 - DEBUG - close.started
2024-10-29 00:39:58,066 - DEBUG - close.complete
2024-10-29 00:40:50,318 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:40:50,318 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:40:50,334 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:40:50,337 - INFO - Processing page 1
2024-10-29 00:40:50,340 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:40:50,359 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:40:50,359 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:40:50,404 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001783A43E690>
2024-10-29 00:40:50,404 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000017839F4ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:40:50,424 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001783A43E890>
2024-10-29 00:40:50,424 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:40:50,426 - DEBUG - send_request_headers.complete
2024-10-29 00:40:50,426 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:40:50,426 - DEBUG - send_request_body.complete
2024-10-29 00:40:50,426 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:40:50,785 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:40:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'259'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_b7fb302ed260dcc69f23839918da5a0b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=YkjhT_z.yTr33yrqK8oIyczzRjv60pu9bUes4Iiktsk-1730180450-1.0.1.1-yWkzxz9IDkXfHq6k_sLjpbE1zsSeN019bv4ezfNYevVQNiUVUSgMfNkR2znTuUavoEmqzCjegHo4zSL5EtWVgg; path=/; expires=Tue, 29-Oct-24 06:10:50 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=NhMpAmif14PkjxIgRcCWKhMegGdS3z8s46cEQyk9r2M-1730180450573-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d545ff332cd0-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:40:50,793 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:40:50,793 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:40:50,795 - DEBUG - receive_response_body.complete
2024-10-29 00:40:50,795 - DEBUG - response_closed.started
2024-10-29 00:40:50,795 - DEBUG - response_closed.complete
2024-10-29 00:40:50,795 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:40:50 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '259'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_b7fb302ed260dcc69f23839918da5a0b'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=YkjhT_z.yTr33yrqK8oIyczzRjv60pu9bUes4Iiktsk-1730180450-1.0.1.1-yWkzxz9IDkXfHq6k_sLjpbE1zsSeN019bv4ezfNYevVQNiUVUSgMfNkR2znTuUavoEmqzCjegHo4zSL5EtWVgg; path=/; expires=Tue, 29-Oct-24 06:10:50 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=NhMpAmif14PkjxIgRcCWKhMegGdS3z8s46cEQyk9r2M-1730180450573-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0d545ff332cd0-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:40:50,795 - DEBUG - request_id: req_b7fb302ed260dcc69f23839918da5a0b
2024-10-29 00:40:50,801 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:40:50,801 - INFO - Got result for page 1
2024-10-29 00:40:51,805 - INFO - Processing page 2
2024-10-29 00:40:51,813 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:40:51,823 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:40:51,823 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:40:51,829 - DEBUG - send_request_headers.complete
2024-10-29 00:40:51,829 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:40:51,829 - DEBUG - send_request_body.complete
2024-10-29 00:40:51,829 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:40:52,216 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:40:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'236'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_73a6670761060c5420bd4b26c97cc1f8'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d54ebffd2cd0-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:40:52,222 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:40:52,222 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:40:52,224 - DEBUG - receive_response_body.complete
2024-10-29 00:40:52,224 - DEBUG - response_closed.started
2024-10-29 00:40:52,224 - DEBUG - response_closed.complete
2024-10-29 00:40:52,224 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:40:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '236', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_73a6670761060c5420bd4b26c97cc1f8', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d54ebffd2cd0-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:40:52,226 - DEBUG - request_id: req_73a6670761060c5420bd4b26c97cc1f8
2024-10-29 00:40:52,227 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:40:52,227 - INFO - Got result for page 2
2024-10-29 00:40:53,228 - INFO - Processing page 3
2024-10-29 00:40:53,228 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:40:53,249 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:40:53,252 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:40:53,252 - DEBUG - send_request_headers.complete
2024-10-29 00:40:53,253 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:40:53,253 - DEBUG - send_request_body.complete
2024-10-29 00:40:53,253 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:40:53,571 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:40:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'222'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_bd7a91f9388f122d3374c6c4bed67e66'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d557a9272cd0-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:40:53,571 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:40:53,571 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:40:53,586 - DEBUG - receive_response_body.complete
2024-10-29 00:40:53,586 - DEBUG - response_closed.started
2024-10-29 00:40:53,586 - DEBUG - response_closed.complete
2024-10-29 00:40:53,586 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:40:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '222', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_bd7a91f9388f122d3374c6c4bed67e66', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d557a9272cd0-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:40:53,586 - DEBUG - request_id: req_bd7a91f9388f122d3374c6c4bed67e66
2024-10-29 00:40:53,592 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:40:53,592 - INFO - Got result for page 3
2024-10-29 00:40:54,593 - INFO - Processing page 4
2024-10-29 00:40:54,607 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:40:54,614 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:40:54,616 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:40:54,617 - DEBUG - send_request_headers.complete
2024-10-29 00:40:54,617 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:40:54,617 - DEBUG - send_request_body.complete
2024-10-29 00:40:54,619 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:40:54,984 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:40:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'239'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_5b7ed61e4f8f287d4ee0fddee1fd7c2d'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d5602a012cd0-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:40:54,984 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:40:54,984 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:40:54,984 - DEBUG - receive_response_body.complete
2024-10-29 00:40:54,990 - DEBUG - response_closed.started
2024-10-29 00:40:54,990 - DEBUG - response_closed.complete
2024-10-29 00:40:54,990 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:40:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '239', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_5b7ed61e4f8f287d4ee0fddee1fd7c2d', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d5602a012cd0-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:40:54,990 - DEBUG - request_id: req_5b7ed61e4f8f287d4ee0fddee1fd7c2d
2024-10-29 00:40:54,990 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:40:54,990 - INFO - Got result for page 4
2024-10-29 00:40:56,063 - DEBUG - close.started
2024-10-29 00:40:56,069 - DEBUG - close.complete
2024-10-29 00:42:20,915 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-10-29 00:42:20,915 - DEBUG - load_verify_locations cafile='C:\\Users\\rahul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\certifi\\cacert.pem'
2024-10-29 00:42:20,925 - INFO - Starting processing of C:\Users\rahul\OneDrive\Desktop\Moco\Pepsi Invoices.pdf
2024-10-29 00:42:20,925 - INFO - Processing page 1
2024-10-29 00:42:20,925 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 1 Start -----\n\n\n----- Page 1 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:42:20,944 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:42:20,944 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-10-29 00:42:20,994 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EE90D75650>
2024-10-29 00:42:20,994 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001EE9098ABA0> server_hostname='api.openai.com' timeout=5.0
2024-10-29 00:42:21,008 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EE90CDF850>
2024-10-29 00:42:21,008 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:42:21,008 - DEBUG - send_request_headers.complete
2024-10-29 00:42:21,008 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:42:21,008 - DEBUG - send_request_body.complete
2024-10-29 00:42:21,008 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:42:21,354 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:42:21 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'241'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_541dd3d1e62ae803b0a13d7ffc3022fb'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=.SLuokNwrURJmY.R8rl6KlEHr121Oh5z8JSWAA.kQzE-1730180541-1.0.1.1-TXVMte.ZcD_3RXWhLEZ4.w1tMO6sOrBS6CKOemnie.H3.3BdyjniOIVtKigcLSquSr4CPEkRCq0Vz1aurvzz0A; path=/; expires=Tue, 29-Oct-24 06:12:21 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=Bi3.YM0KPp_.KtKyL1reTQMMybuWvE7OlAfFxmdZb2c-1730180541162-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d77c1f9ce595-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:42:21,370 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:42:21,370 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:42:21,373 - DEBUG - receive_response_body.complete
2024-10-29 00:42:21,374 - DEBUG - response_closed.started
2024-10-29 00:42:21,374 - DEBUG - response_closed.complete
2024-10-29 00:42:21,376 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 29 Oct 2024 05:42:21 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'culvana'), ('openai-processing-ms', '241'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9991828'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '49ms'), ('x-request-id', 'req_541dd3d1e62ae803b0a13d7ffc3022fb'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=.SLuokNwrURJmY.R8rl6KlEHr121Oh5z8JSWAA.kQzE-1730180541-1.0.1.1-TXVMte.ZcD_3RXWhLEZ4.w1tMO6sOrBS6CKOemnie.H3.3BdyjniOIVtKigcLSquSr4CPEkRCq0Vz1aurvzz0A; path=/; expires=Tue, 29-Oct-24 06:12:21 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=Bi3.YM0KPp_.KtKyL1reTQMMybuWvE7OlAfFxmdZb2c-1730180541162-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8da0d77c1f9ce595-DFW'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-10-29 00:42:21,378 - DEBUG - request_id: req_541dd3d1e62ae803b0a13d7ffc3022fb
2024-10-29 00:42:21,383 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:42:21,383 - INFO - Got result for page 1
2024-10-29 00:42:22,390 - INFO - Processing page 2
2024-10-29 00:42:22,396 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 2 Start -----\n\n\n----- Page 2 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:42:22,409 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:42:22,409 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:42:22,409 - DEBUG - send_request_headers.complete
2024-10-29 00:42:22,409 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:42:22,411 - DEBUG - send_request_body.complete
2024-10-29 00:42:22,411 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:42:22,845 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:42:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'275'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_fe2b635cd1c3190019f14d56b9c7a949'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d784d8e8e595-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:42:22,845 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:42:22,845 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:42:22,845 - DEBUG - receive_response_body.complete
2024-10-29 00:42:22,845 - DEBUG - response_closed.started
2024-10-29 00:42:22,845 - DEBUG - response_closed.complete
2024-10-29 00:42:22,845 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:42:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '275', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_fe2b635cd1c3190019f14d56b9c7a949', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d784d8e8e595-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:42:22,855 - DEBUG - request_id: req_fe2b635cd1c3190019f14d56b9c7a949
2024-10-29 00:42:22,860 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:42:22,862 - INFO - Got result for page 2
2024-10-29 00:42:23,863 - INFO - Processing page 3
2024-10-29 00:42:23,871 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 3 Start -----\n\n\n----- Page 3 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:42:23,880 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:42:23,880 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:42:23,880 - DEBUG - send_request_headers.complete
2024-10-29 00:42:23,882 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:42:23,883 - DEBUG - send_request_body.complete
2024-10-29 00:42:23,883 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:42:24,483 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:42:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'328'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_815d8f8855fe1886537c4e783b6967f5'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d78e0a79e595-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:42:24,483 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:42:24,483 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:42:24,483 - DEBUG - receive_response_body.complete
2024-10-29 00:42:24,483 - DEBUG - response_closed.started
2024-10-29 00:42:24,483 - DEBUG - response_closed.complete
2024-10-29 00:42:24,488 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:42:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '328', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_815d8f8855fe1886537c4e783b6967f5', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d78e0a79e595-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:42:24,488 - DEBUG - request_id: req_815d8f8855fe1886537c4e783b6967f5
2024-10-29 00:42:24,490 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:42:24,492 - INFO - Got result for page 3
2024-10-29 00:42:25,493 - INFO - Processing page 4
2024-10-29 00:42:25,493 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert invoice analysis AI specialized in wholesale produce invoices. Your task is to:\n1. Extract structured information with 100% accuracy\n2. Maintain data integrity across all fields\n3. Apply standardized validation rules\n4. Handle missing data according to specific rules\n5. Ensure all calculations are precise and verified'}, {'role': 'user', 'content': '\nDETAILED INVOICE ANALYSIS INSTRUCTIONS:\n\n1. HEADER INFORMATION\n   Extract these specific fields:\n\n   A. Basic Invoice Information\n      • Supplier Name\n        Headers to check:\n        - "Vendor:", "Supplier:", "From:", "Sold By:"\n        Rules:\n        - Use FIRST supplier name found\n        - Use EXACTLY same name throughout\n        - Don\'t modify or formalize\n      \n      • Sold to Address\n        Headers to check:\n        - "Sold To:", "Bill To:", "Customer:"\n        Format:\n        - Complete address with all components\n        - Include street, city, state, ZIP\n      \n      • Order Date\n        Headers to check:\n        - "Order Date:", "Date Ordered:", "PO Date:"\n        Format: YYYY-MM-DD\n      \n      • Ship Date\n        Headers to check:\n        - "Ship Date:", "Delivery Date:", "Shipped:"\n        Format: YYYY-MM-DD\n      \n      • Invoice Number\n        Headers to check:\n        - "Invoice #:", "Invoice Number:", "Invoice ID:"\n        Rules:\n        - Include all digits/characters\n        - Keep leading zeros\n      \n      • Shipping Address\n        Headers to check:\n        - "Ship To:", "Deliver To:", "Destination:"\n        Format:\n        - Complete delivery address\n        - All address components included\n      \n      • Total\n        Headers to check:\n        - "Total:", "Amount Due:", "Balance Due:"\n        Rules:\n        - Must match sum of line items\n        - Include tax if listed\n        - Round to 2 decimals\n\n2. LINE ITEM DETAILS\n   Extract these fields for each item:\n\n   A. Basic Item Information\n      • Item Number\n        Headers to check:\n        -"Product Code:" -"Item Number:" -"SKU:" -"UPC:"\n        Rules:\n        - Keep full identifier\n        - Include leading zeros\n      \n      • Item Name\n        Headers to check:\n        - "Description:", "Product:", "Item:"\n        Rules:\n        - Include full description\n        - Keep original format\n      \n      • Product Category\n        Classify as:\n        - PRODUCE: Fresh fruits/vegetables\n        - DAIRY: Milk, cheese, yogurt\n        - MEAT: Beef, pork, poultry\n        - SEAFOOD: Fish, shellfish\n        - Beverages: Sodas,juices,water\n        - Dry Grocery: Chips, candy, nuts,Canned goods, spices, sauces\n        - BAKERY: Bread, pastries, cakes\n        - FROZEN: Ice cream, meals, desserts\n        - paper goods and Disposables: Bags, napkins, plates, cups, utensils,packing materials\n        - liquor: Beer, wine, spirits\n        - Chemical: Soaps, detergents, supplies\n        - OTHER: Anything not in above categories\n\n   B. Quantity and Measurement Details\n      • Quantity Shipped\n        Headers to check:\n        - "Qty:", "Quantity:", "Shipped:"\n        Rules:\n        - Must be positive number\n        - Default to 1 if missing\n      \n      • Quantity In a Case\n        Headers to check:\n        - "Units/Case:", "Pack Size:", "Case Pack:"\n        Patterns to check:\n        -  24= "24 units"\n        - "24/12oz" = 24 units\n        - "2/12ct" = 24 units\n        Default: 1 if not found\n      \n      • Measurement Of Each Item\n        Headers to check:\n        - "Size:", "Weight:", "Volume:"\n        Extract from description:\n        - "5 LB BAG" → 5\n        - "32 OZ PKG" → 32\n\n   B. Measurement Units:\n      • Measured In - Standard Units:\n        \n        WEIGHT:\n        - pounds: LB, LBS, #, POUND\n        - ounces: OZ, OUNCE\n        - kilos: KG, KILO\n        - grams: G, GM, GRAM\n\n        COUNT:\n        - each: EA, PC, CT, COUNT, PIECE\n        - case: CS, CASE, BX, BOX\n        - dozen: DOZ, DZ\n        - pack: PK, PACK, PKG\n        - bundle: BDL, BUNDLE\n\n        VOLUME:\n        - gallons: GAL, GALLON\n        - quarts: QT, QUART\n        - pints: PT, PINT\n        - fluid_ounces: FL OZ, FLOZ\n        - liters: L, LT, LTR\n        - milliliters: ML\n\n        CONTAINERS:\n        - cans: CN, CAN, #10 CAN\n        - jars: JR, JAR\n        - bottles: BTL, BOTTLE\n        - containers: CTN, CONT\n        - tubs: TB, TUB\n        - bags: BG, BAG\n\n        PRODUCE:\n        - bunch: BN, BCH, BUNCH\n        - head: HD, HEAD\n        - basket: BSK, BASKET\n        - crate: CRT, CRATE\n        - carton: CRTN, CARTON\n      \n      • Total Units\n        Calculate: Measurement of Each Item * Quantity In Case * Quantity Shipped\n        Example: 5lb * 10 per case * 2 cases = 100 pounds\n\n   C. Pricing Information\n      • Extended Price\n        Headers to check:\n        - "Ext Price:", "Total:", "Amount:"\n        Rules:\n        - Must equal Case Price * Quantity Shipped\n      \n      • Case Price\n        Headers to check:\n        - "Unit Price:", \n        Rules:\n        - Price for single Unit price \n      \n      • Cost of a Unit\n        Calculate: Extended Price ÷ Total Units\n        Example: $100 ÷ 100 pounds = $1.00/lb\n      \n      • Currency\n        Default: "USD" if not specified\n\n      • Cost of Each Item\n        Cost of Each Item is calculated by Cost of Each Item=Cost of a unit* Measurement of each item\n        Verfiy by (Extended Price*Mesurement of each item)/Total Units\n        Default: if not specified "N/A"\n       \n   D. Additional Attributes\n      • Catch Weight:\n       If You have referenece take that Reference If not then "N/A"\n        Default: "N/A" if unclear\n      \n      • Priced By\n        Determine from:\n        - Price column headers\n        - Unit specifications\n        Values:\n        - "per pound"\n        - "per case"\n        - "per each"\n      \n      • Splitable\n        -Set "YES" if:\n        -if you have "YES" reference to Splitable\n\n        Set "NO" if:\n        - if you have "NO" reference to Splitable\n\n        Set "NO" if:\n        - Bulk only\n        - Single unit\n      \n      • Split Price\n        If Splitable = "YES":\n        - Calculate: Case Price ÷ Quantity In Case\n        If Splitable = "NO":\n        - Use "N/A"\n\n3. VALIDATION RULES\n   • Numeric Checks:\n     - All quantities must be positive\n     - All prices must be positive\n     - Total must match sum of line items\n   \n   • Required Fields:\n     - Supplier Name\n     - Invoice Number\n     - Total Amount\n     - Item Name\n     - Extended Price\n   \n   • Default Values:\n     - Quantity: 1.0\n     - Currency: "USD"\n     - Split Price: "N/A"\n     - Category: "OTHER"\n\nOUTPUT FORMAT:\nReturn a JSON array containing each invoice as an object matching this template:\n{\n  "Supplier Name": "",\n  "Sold to Address": "",\n  "Order Date": "",\n  "Ship Date": "",\n  "Invoice Number": "",\n  "Shipping Address": "",\n  "Total": 0,\n  "List of Items": [\n    {\n      "Item Number": "",\n      "Item Name": "",\n      "Product Category": "",\n      "Quantity Shipped": 1.0,\n      "Extended Price": 1.0,\n      "Quantity In a Case": 1.0,\n      "Measurement Of Each Item": 1.0,\n      "Measured In": "",\n      "Total Units": 1.0,\n      "Case Price": 0,\n      "Catch Weight": "",\n      "Priced By": "",\n      "Splitable": "",\n      "Split Price": "N/A",\n      "Cost of a Unit": 1.0,\n      "Currency": "",\n      "Cost of Each Item": 1.0\n    }\n  ]\n}\n\nINVOICE TEXT TO PROCESS:\n\n----- Page 4 Start -----\n\n\n----- Page 4 End -----\n\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 15000, 'temperature': 0.1}}
2024-10-29 00:42:25,501 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-10-29 00:42:25,501 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-10-29 00:42:25,501 - DEBUG - send_request_headers.complete
2024-10-29 00:42:25,501 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-10-29 00:42:25,501 - DEBUG - send_request_body.complete
2024-10-29 00:42:25,501 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-10-29 00:42:25,907 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 29 Oct 2024 05:42:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'culvana'), (b'openai-processing-ms', b'274'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_633c688c43607756f6021ff23fc2dd93'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8da0d7983d6ae595-DFW'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-10-29 00:42:25,907 - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-10-29 00:42:25,907 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-10-29 00:42:25,907 - DEBUG - receive_response_body.complete
2024-10-29 00:42:25,907 - DEBUG - response_closed.started
2024-10-29 00:42:25,907 - DEBUG - response_closed.complete
2024-10-29 00:42:25,907 - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 29 Oct 2024 05:42:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'culvana', 'openai-processing-ms': '274', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_633c688c43607756f6021ff23fc2dd93', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8da0d7983d6ae595-DFW', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-10-29 00:42:25,907 - DEBUG - request_id: req_633c688c43607756f6021ff23fc2dd93
2024-10-29 00:42:25,922 - ERROR - Error processing with GPT-4: Expecting value: line 1 column 1 (char 0)
2024-10-29 00:42:25,922 - INFO - Got result for page 4
2024-10-29 00:42:27,010 - DEBUG - close.started
2024-10-29 00:42:27,010 - DEBUG - close.complete
